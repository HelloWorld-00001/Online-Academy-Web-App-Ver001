{{#section 'css'}}
<style>
    .btn-circle {
        width: 30px;
        height: 30px;
        text-align: center;
        padding: 6px 0;
        font-size: 12px;
        line-height: 1.428571429;
        border-radius: 15px;
        background: rgb(255, 255, 255);
    }

    .text-black {
        color: black;
    }
</style>
{{/section}}

{{#section 'js'}}
<script>
    $(document).ready(function () {
        $('#ModalAddCategory').on('click', '#paramsSubmit', function (e) {
            console.log($('#txtNameCategory').val());
        });
    })
</script>
{{#if err_message}}
<script>
    $('#ModalAlert').addClass('shown.bs.modal')
</script>
{{/if}}

<script>
        (function () {
            const videolist = videos
            const quotesEl = document.querySelector('.quotes');
            const loaderEl = document.querySelector('.loader');
            // get the quotes from API
            const getQuotes = async (page, limit) => {
                const API_URL = `https://api.javascripttutorial.net/v1/quotes/?page=${page}&limit=${limit}`;
                const response = await fetch(API_URL);
                // handle 404
                
                if (!response.ok) {
                    throw new Error(`An error occurred: ${response.status}`);
                }
                return await response.json();
            }

            // show the quotes
            const showQuotes = (quotes) => {
                quotes.forEach(quote => {
                    const quoteEl = document.createElement('blockquote');
                    quoteEl.classList.add('quote');

                    quoteEl.innerHTML = `
                    <span>${quote.id})</span>
                    ${quote.quote}
                    <footer>${quote.author}</footer>
                `;

                    quotesEl.appendChild(quoteEl);
                });
            };

            const hideLoader = () => {
                loaderEl.classList.remove('show');
            };

            const showLoader = () => {
                loaderEl.classList.add('show');
            };

            const hasMoreQuotes = (page, limit, total) => {
                const startIndex = (page - 1) * limit + 1;
                return total === 0 || startIndex < total;
            };

            // load quotes
            const loadQuotes = async (page, limit) => {

                // show the loader
                showLoader();

                // 0.5 second later
                setTimeout(async () => {
                    try {
                        // if having more quotes to fetch
                        if (hasMoreQuotes(page, limit, total)) {
                            // call the API to get quotes
                            const response = await getQuotes(page, limit);
                            // show quotes
                            showQuotes(response.data);
                            // update the total
                            total = response.total;
                        }
                    } catch (error) {
                        console.log(error.message);
                    } finally {
                        hideLoader();
                    }
                }, 500);

            };

            // control variables
            let currentPage = 1;
            const limit = 10;
            let total = 0;


            window.addEventListener('scroll', () => {
                const {
                    scrollTop,
                    scrollHeight,
                    clientHeight
                } = document.documentElement;

                if (scrollTop + clientHeight >= scrollHeight - 5 &&
                    hasMoreQuotes(currentPage, limit, total)) {
                    currentPage++;
                    loadQuotes(currentPage, limit);
                }
            }, {
                passive: true
            });

            // initialize
            loadQuotes(currentPage, limit);

        })();
</script>
{{/section}}

<section class="pcoded-main-container">
    <div class="pcoded-wrapper">
        <div class="pcoded-content">
            <div class="pcoded-inner-content">
                <div class="main-body">
                    <div class="page-wrapper">
                        <div class="row">
                            <div class="col-xl-12 col-md-12">
                                <div class="container">
                                    <h1>Videos</h1>

                                    <div class="quotes">
                                    </div>

                                    <div class="loader">
                                        <div></div>
                                        <div></div>
                                        <div></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Khung nháº­p  -->
<div class="modal fade" id="ModalAddCategory" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">
                    <h3>Add Category</h3>
                </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form method="post">
                <div class="modal-body">
                    <div class="form-group flex-row">
                        <label for="txtNameCategory">
                            <h4>New Category</h4>
                        </label>
                        <input name="Name" type="text" class="form-control w-100 h-100" id="txtNameCategory" autofocus>
                    </div>
                </div>
                <div class="modal-footer text-muted">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" name="addCategory" value="add" class="btn btn-primary"
                        id="paramsSubmit">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Khung edit  -->
<div class="modal fade" id="ModalEditCategory" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">
                    <h3>Edit Category</h3>
                </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form method="post">
                <div class="modal-body">
                    <div class="form-group flex-row">
                        <label for="NameCate">
                            <h4></h4>
                        </label>
                        <input name="NameCate" type="text" class="form-control w-100 h-100" id="NameCate" autofocus>
                    </div>
                </div>
                <div class="modal-footer text-muted">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary" id="paramsSubmit">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Khung alert  -->
<div class="modal fade" id="ModalAlert" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">
                    <h3>Alert</h3>
                </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form method="post">
                <div class="modal-body">
                    <p>This Field have courses</p>
                </div>
                <div class="modal-footer text-muted">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </form>
        </div>
    </div>
</div>